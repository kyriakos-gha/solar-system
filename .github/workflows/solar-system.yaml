name: Solar System Workflow

on:
    workflow_dispatch:
    push:
        branches:
            - main
            - 'feature/*'

env:
  MONGO_URI: 'mongodb+srv://supercluster.d83jj.mongodb.net/superData'
  MONGO_USERNAME: ${{ vars.MONGO_USERNAME }}
  MONGO_PASSWORD: ${{ secrets.MONGO_PASSWORD }}

jobs:
    unit-testing:
        name: Unit Testing
        services:
          mongo-db:
            image: siddharth67/mongo-db:non-prod
            ports:
              - 27017:27017
        env:
          MONGO_URI: 'mongodb://localhost:27017/superData'
          MONGO_USERNAME: non-prod-user
          MONGO_PASSWORD: non-prod-password
        strategy:
          matrix:
            nodejs_version: [18, 20]
            operating_system: [ubuntu-latest]
            exclude:
              - nodejs_version: 18
                operating_system: macos-latest
        runs-on: ${{ matrix.operating_system }}
        steps:
            - name: Checkout Repository
              uses: actions/checkout@v4

            - name: Setup NodeJS Version - ${{ matrix.nodejs_version }}
              uses: actions/setup-node@v4.0.3
              with:
                node-version: ${{ matrix.nodejs_version }}

            - name: Cache NPM dependencies
              uses: actions/cache@v4.0.2
              with:
                path: node_modules
                key: ${{ runner.os }}-node-modules-${{ hashFiles('package-lock.json') }}

            - name: Install Dependencies
              run: npm install

            - name: Unit Testing
              id: nodejs-unit-testing-step
              run: npm test

            - name: Archive Test Result
              uses: actions/upload-artifact@v4.3.4
              if: ${{ !cancelled() }}
              with:
                name: Mocha-Test-Result-${{ matrix.nodejs_version }}-${{ matrix.operating_system }}
                path: test-results.xml

    code-coverage:
      name: Code Coverage
      runs-on: ubuntu-latest
      container:
        image: node:20
      services:
        mongo-db:
            image: siddharth67/mongo-db:non-prod
            options:
              --name mongo
      env:
        MONGO_URI: 'mongodb://mongo:27017/superData'
        MONGO_USERNAME: non-prod-user
        MONGO_PASSWORD: non-prod-password
      steps:
        - name: Checkout Repository
          uses: actions/checkout@v4

        # - name: Setup NodeJS Version - 20
        #   uses: actions/setup-node@v4.0.3
        #   with:
        #     node-version: 20

        - name: Cache NPM dependencies
          uses: actions/cache@v4.0.2
          with:
            path: node_modules
            key: ${{ runner.os }}-node-modules-${{ hashFiles('package-lock.json') }}

        - name: Install Dependencies
          run: npm install

        - name: Check Code Coverage
          continue-on-error: true
          run: npm run coverage

        - name: Archive Test Result
          uses: actions/upload-artifact@v4.3.4
          with:
            name: Code-Coverage-Result
            path: coverage
            retention-days: 5

    docker:
      name: Containerization
      needs: [unit-testing, code-coverage]
      runs-on: ubuntu-latest
      permissions: 
        packages: write
      steps:
        - name: Checkout Repo
          uses: actions/checkout@v4
        
        - name: Dockerhub Login
          uses: docker/login-action@v2.2.0
          with:
            username: ${{ vars.DOCKERHUB_USERNAME }}
            password: ${{ secrets.DOCKERHUB_TOKEN}}

        - name: GHCR Login
          uses: docker/login-action@v2.2.0
          with:
            registry: ghcr.io
            username: ${{ github.repository_owner }}
            password: ${{ secrets.GITHUB_TOKEN}}

        - name: Docker Build for Testing
          uses: docker/build-push-action@v6.5.0
          with:
            context: .
            push: false
            tags: ${{ vars.DOCKERHUB_USERNAME }}/solar-system:${{ github.sha }}

        - name: Docker Image Testing
          run: |
            docker images
            docker run --name solar-system-app -d \
              -p 3000:3000 \
              -e MONGO_URI=${{ env.MONGO_URI }} \
              -e MONGO_USERNAME=${{ env.MONGO_USERNAME }} \
              -e MONGO_PASSWORD=${{ env.MONGO_PASSWORD }} \
              ${{ vars.DOCKERHUB_USERNAME }}/solar-system:${{ github.sha }}

            export IP=$(docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' solar-system-app)
            echo $IP

            echo Testing Image URL using wget
            wget -q -O - 127.0.0.1:3000/live | grep live

        - name: Container Registry Push
          uses: docker/build-push-action@v6.5.0
          with:
            context: .
            push: true
            tags: |
              ghcr.io/${{ github.repository_owner }}/solar-system:${{ github.sha }}
              ${{ vars.DOCKERHUB_USERNAME }}/solar-system:${{ github.sha }}

    dev-deploy:
      if: contains(github.ref, 'feature/')
      needs: [docker]
      environment:
        name: development
        url: https://${{ steps.set-ingress-host-address.outputs.APP_INGRESS_HOST }}
      runs-on: ubuntu-latest
      outputs:
        APP_INGRESS_URL: ${{ steps.set-ingress-host-address.outputs.APP_INGRESS_HOST }}
      steps:
        - name: Checkout Repository
          uses: actions/checkout@v4
        - name: Install kubectl CLI
          uses: azure/setup-kubectl@v4.0.0
          with:
            version: 'v1.27.0'

        # - name: Setup Kubernetes context
        #   uses: azure/k8s-set-context@v4.0.0
        #   with:
        #     method: kubeconfig
        #     kubeconfig: ${{ secrets.KUBECONFIG }}
          
        # - name: Fetch Kubernetes Cluster Details
        #   run: |
        #     kubectl version --short -oyaml
        #     echo -----------------------
        #     kubectl get nodes

        # - name: Save Ingress IP as a GITHUB Environment variable
        #   run: |
        #     echo "INGRESS_IP=$(kubectl get svc -n ingress-nginx ingress-nginx-controller -ojsonpath=".status.loadBalancer.ingress[0].ip")" >> $GITHUB_ENV

        - name: Replace tokens in manifest files
          uses: cschleiden/replace-tokens@v1.3
          with:
            tokenPrefix: '${'
            tokenSuffix: '}'
            files: '["kubernetes/development/*.yaml"]'
          env:
            NAMESPACE: ${{ vars.NAMESPACE }}
            REPLICAS: ${{ vars.REPLICAS}}
            IMAGE: ${{ vars.DOCKERHUB_USERNAME}}/solar-system:${{ github.sha }}
            # INGRESS_IP: ${{ env.INGRESS_IP }}
            INGRESS_IP: my-app

        - name: Check files
          run: |
            cat kubernetes/development/*.yaml

        - name: Create DB creds secret
          run: |
            kubectl -n ${{ vars.NAMESPACE }} create secret generic mongo-db-creds \
              --from-literal=MONGO_URI=${{ env.MONGO_URI }} \
              --from-literal=MONGO_USERNAME=${{ vars.MONGO_USERNAME }} \
              --from-literal=MONGO_PASSWORD=${{ env.MONGO_PASSWORD }} \
              --save-config \
              --dry-run=client \
              -o yaml

        # - name: Deploy to Den Env
        #   run: |
        #     kubectl apply -f kubernetes/development/*.yaml

        - name: Set App Ingress Host URL
          id: set-ingress-host-address
          run: |
            echo "APP_INGRESS_HOST=$(kubectl -n ${{ vars.NAMESPACE }} get ingress -o jsonpath=".items[0].spec.tls[0].hosts[0]")" >> $GITHUB_OUTPUT

    dev-integration-testing:
      if: contains(github.ref, 'feature/')
      name: Dev Integration Testing
      needs: dev-deploy
      runs-on: ubuntu-latest
      steps:
        - name: Test URL output using curl and jq
          env:
            URL: ${{ needs.dev-deploy.outputs.APP_INGRESS_URL }}
          run: |
            echo $URL
            echo "--------------"
            curl https://$URL/live -s -k | jq -r .status | grep -i live
          
    prod-deploy:
      needs: [docker]
      if: github.ref == 'refs/heads/main'
      environment:
        name: production
        url: https://${{ steps.set-ingress-host-address.outputs.APP_INGRESS_HOST }}
      runs-on: ubuntu-latest
      outputs:
        APP_INGRESS_URL: ${{ steps.set-ingress-host-address.outputs.APP_INGRESS_HOST }}
      steps:
        - name: Checkout Repository
          uses: actions/checkout@v4
        - name: Install kubectl CLI
          uses: azure/setup-kubectl@v4.0.0
          with:
            version: 'v1.27.0'

        # - name: Setup Kubernetes context
        #   uses: azure/k8s-set-context@v4.0.0
        #   with:
        #     method: kubeconfig
        #     kubeconfig: ${{ secrets.KUBECONFIG }}
          
        # - name: Fetch Kubernetes Cluster Details
        #   run: |
        #     kubectl version --short -oyaml
        #     echo -----------------------
        #     kubectl get nodes

        # - name: Save Ingress IP as a GITHUB Environment variable
        #   run: |
        #     echo "INGRESS_IP=$(kubectl get svc -n ingress-nginx ingress-nginx-controller -ojsonpath=".status.loadBalancer.ingress[0].ip")" >> $GITHUB_ENV

        - name: Replace tokens in manifest files
          uses: cschleiden/replace-tokens@v1.3
          with:
            tokenPrefix: '${'
            tokenSuffix: '}'
            files: '["kubernetes/production/*.yaml"]'
          env:
            NAMESPACE: ${{ vars.NAMESPACE }}
            REPLICAS: ${{ vars.REPLICAS}}
            IMAGE: ${{ vars.DOCKERHUB_USERNAME}}/solar-system:${{ github.sha }}
            # INGRESS_IP: ${{ env.INGRESS_IP }}
            INGRESS_IP: my-app

        - name: Check files
          run: |
            cat kubernetes/production/*.yaml

        - name: Create DB creds secret
          run: |
            kubectl -n ${{ vars.NAMESPACE }} create secret generic mongo-db-creds \
              --from-literal=MONGO_URI=${{ env.MONGO_URI }} \
              --from-literal=MONGO_USERNAME=${{ vars.MONGO_USERNAME }} \
              --from-literal=MONGO_PASSWORD=${{ env.MONGO_PASSWORD }} \
              --save-config \
              --dry-run=client \
              -o yaml

        # - name: Deploy to Prod Env
        #   run: |
        #     kubectl apply -f kubernetes/production/*.yaml

        - name: Set App Ingress Host URL
          id: set-ingress-host-address
          run: |
            echo "APP_INGRESS_HOST=$(kubectl -n ${{ vars.NAMESPACE }} get ingress -o jsonpath=".items[0].spec.tls[0].hosts[0]")" >> $GITHUB_OUTPUT

    prod-integration-testing:
      name: Prod Integration Testing
      needs: [prod-deploy]
      if: github.ref == 'refs/heads/main'
      runs-on: ubuntu-latest
      steps:
        - name: Test URL output using curl and jq
          env:
            URL: ${{ needs.prod-deploy.outputs.APP_INGRESS_URL }}
          run: |
            echo $URL
            echo "--------------"
            curl https://$URL/live -s -k | jq -r .status | grep -i live
          
